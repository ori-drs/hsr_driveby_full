#!/usr/bin/env python
from __future__ import print_function, division

from time import time, sleep
import math
import signal
import numpy as np

import rospy
import pyexotica as exo
from pyexotica.publish_trajectory import *
from pyexotica.tools import *


from pyexotica.publish_trajectory import sig_int_handler

np.random.seed(1)

use_screenshot = False
# ffmpeg -r 50 -f image2 -s 1920x1080 -i ./hsr_driveby_visualisation_%03d.png -vcodec libx264 -pix_fmt yuv420p ./output.mp4
screenshot = lambda *args: None
if use_screenshot:
    from jsk_rviz_plugins.srv import Screenshot, ScreenshotRequest, ScreenshotResponse
    rospy.wait_for_service('/rviz/screenshot')
    screenshot = rospy.ServiceProxy('/rviz/screenshot', Screenshot)

class DrivebyPickAndPlaceDemo(object):
    def __init__(self, debug=False, constrained_ik=False):

        # Load solvers
        self.ompl_solver = exo.Setup.load_solver(
            '{hsr_driveby_full}/resources/base_planning_2.xml')
        self.ompl_problem = self.ompl_solver.get_problem()

    def solve_rrtconnect(self, goal):
        self.ompl_problem.goal_state = goal
        # print(self.ompl_problem.get_tasks())
        print(type(self.ompl_problem))
        print(type(self.ompl_solver))
        solution = self.ompl_solver.solve()
        return solution

if __name__ == "__main__":
    exo.Setup.init_ros()

    planner = DrivebyPickAndPlaceDemo(debug=True)  

    # create a .traj file
    def to_traj_file(soln, filename):
        import sys
        import os

        rows, cols = soln.shape
        # remove additional columns
        if cols > 4:
            soln = soln[:,cols-3:cols]
            print("trimmed the columns")
        
        traj_file = os.path.abspath(filename)
        # write to .traj file
        traj_file = open(filename, "w")
        traj_file.write("1\n")
        traj_file.write("%d %d\n" %(rows, cols))
        for i in range(rows):
            traj_file.write("%f %f %f %f\n" %(soln[i,0], soln[i,1], soln[i,2], soln[i,3]))
        traj_file.close()

    def correct_vel(soln, vel_limits):
        row, col = soln.shape
        diff = np.diff(soln, axis=1)
        vel =  diff / diff[:,0]
        
    
    # use rrtconnect to find a valid base trajectory that approaches the object
    goal = [1,0,0]
    solution_approach = planner.solve_rrtconnect(goal)
    print(solution_approach)
    plot(solution_approach)

    row, col = solution_approach.shape
    time_arr = np.arange(row) * 0.1
    solution = np.insert(solution_approach,0, time_arr, axis=1)
    print(solution)
    publish_trajectory(solution_approach, 10.0, planner.ompl_solver.get_problem())
    print("to traj file")
    # output base trajectory to traj file.
    to_traj_file(solution, "base_trajectory/base_trajectory_file.traj")
    print("sent to traj file. look for it now")
    publish_trajectory(solution_approach[:,1:4], planner.t_total, planner.ompl_problem)

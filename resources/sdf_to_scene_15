#!/usr/bin/env python
from __future__ import print_function
from pyexotica.transformations import euler_from_quaternion

import re

# def parseSceneFile(file_name, debug=False):
#     data = []
#     with open(file_name, 'rU') as fin:
#         for line in fin:
#             line = line.strip()
#             if line:
#                 data.append(line)

#     objects = {}

# # Get name of scene
#     assert data[0][0] == "(" and data[0][-2:] == ")+"
#     sceneName = data[0].replace("(", "").replace(")+", "")

#     if debug:
#         print("Parsing Scene:", sceneName)
#     idx = 1
#     while idx < len(data):
#         if data[idx][0] == ".":
#             if debug:
#                 print("Done")
#             break
#         elif data[idx][0] == "*":
#             objectName = data[idx].replace("* ", "")
#             idx += 1
#             numberOfElements = int(data[idx])
#             if debug:
#                 print("New object:", objectName,
#                       "with", numberOfElements, "elements")
#             components = []
#             for i in range(numberOfElements):
#                 if data[idx + 1] == "box":
#                     size = [float(e) for e in data[idx + 2].split(" ")]
#                     position = [float(e) for e in data[idx + 3].split(" ")]
#                     orientation = [float(e) for e in data[idx + 4].split(" ")]
#                     color = [float(e) for e in data[idx + 5].split(" ")]
#                     if debug:
#                         print("Box #" + str(i) + ": Size=", size,
#                               "Position=", position,
#                               "Orientation=", orientation,
#                               "Color=", color)
#                     components.append({'type': 'box',
#                                        'size': size,
#                                        'position': position,
#                                        'orientation': orientation,
#                                        'color': color})
#                     idx += 5
#                 else:
#                     raise Exception("Not supported", data[idx + 1])
#             objects.update({objectName: components})
#         else:
#             idx += 1

#     return objects

class link:
    def __init__(self, name, pos, shape, geometry):
        self.name = name
        # location (array)
        self.pos = pos
        # shape (string) box, cylinder ...
        self.shape = shape
        # geometry of shape.
        self.geometry = geometry


def parseSceneFile(file_name, debug = True):
    data = []
    with open(file_name, 'rU') as fin:
        for line in fin:
            line = line.strip()
            if line:
                data.append(line)

    objects = {}
    name = ""

    # # Get name of scene
    assert data[0][0] == "<" and data[0][-1:] == ">"
    # remove the
    sdfName = file_name[:-4]
    # sceneName = data[0].replace("(", "").replace(")+", "")

    if debug:
        print("Parsing Scene:", sdfName)
        # print(data)
    idx = 1
    while idx < len(data):
        # if re.search("</sdf>",data[idx]):
        if "</sdf>" in data[idx]:
            if debug:
                print("Done")
            break
        elif "<model name" in data[idx]:
            # temp = re.search("<model\s*name\s*=\s*'\**(.+?)'", data[idx])
            temp = re.search("<model\s*name\s*=\s*[\'\"]+\**(.+?)[\'\"]+", data[idx])
            model_name = temp.group(1)
        # elif re.search("<link name", data[idx]):
        elif "<link name" in data[idx]:
            temp = re.search("<link\s*name\s*=\s*[\'\"]+(.+?)[\'\"]+", data[idx])
            # in link tag
            print("in link tag")
            while not "</link>" in data[idx]:
                print(data[idx])
                if "<collision" in data[idx]:
                    if "name" in data[idx]:
                        temp = re.search("<collision\s*name\s*=\s*[\'\"]+(.+?)[\'\"]+", data[idx])
                    components = []
                    name = temp.group(1)
                    geometry = []
                    shape = ""
                    pos = []
                    # in collision tag
                    print("in collision tag")
                    while not "</collision" in data[idx]:
                        print(data[idx])
                        # in some cases, pose is in collision
                        if "<pose>" in data[idx]:
                            pos = re.findall("[-+]?\d*\.\d+|\d+", data[idx])   
                        if "<geometry" in data[idx]:
                            geo_idx = idx
                            # in geometry tag
                            print("in geometry tag")
                            while not "</geometry" in data[geo_idx]:
                                print(data[geo_idx])
                                if "<box" in data[geo_idx]:
                                    shape = "box"
                                    # in shape tag
                                    print("in box tag")
                                    while not "</box>" in data[geo_idx]:
                                        print(data[geo_idx])
                                        if "<size>" in data[geo_idx]:
                                            geometry = re.findall('\d*\.?\d+', data[geo_idx])
                                            print(geometry)
                                        geo_idx += 1

                                elif "<cylinder" in data[geo_idx]:
                                    shape = "cylinder"
                                    # in shape tag
                                    print("in cylinder tag")
                                    while not "</cylinder>" in data[geo_idx]:
                                        print(data[geo_idx])
                                        if "<radius" in data[geo_idx]:
                                            # print(re.findall('\d*\.?\d+', data[geo_idx]))
                                            # print(type(re.findall('\d*\.?\d+', data[geo_idx])))
                                            geometry.append(re.findall('\d*\.?\d+', data[geo_idx])[0])
                                            print(geometry)
                                        if "<length" in data[geo_idx]:
                                            geometry.append(re.findall('\d*\.?\d+', data[geo_idx])[0])
                                            print(geometry)
                                        geo_idx += 1
                                # if "<cylinder>" in data[idx]:
                                #     shape = "cylinder"
                                geo_idx += 1
                        idx += 1
                    print("exited collision tag =============================")
                    print(shape)
                    print(pos)
                    print(geometry)
                    components.append({'type': shape,
                                    'size': geometry,
                                    'position': pos[0:3],
                                    'orientation': pos[3:6]})
                    objects.update({name: components})
                if "<visual" in data[idx]:
                    while not "</visual" in data[idx]:
                        idx += 1
                # in some cases pose is in link tag
                if "<pose>" in data[idx]:
                    pos = re.findall("[-+]?\d*\.\d+|\d+", data[idx])
                idx += 1
            # return objects
        idx += 1



    #     elif data[idx][0] == "*":
    #         objectName = data[idx].replace("* ", "")
    #         idx += 1
    #         numberOfElements = int(data[idx])
    #         if debug:
    #             print("New object:", objectName,
    #                   "with", numberOfElements, "elements")
    #         components = []
    #         for i in range(numberOfElements):
    #             if data[idx + 1] == "box":
    #                 size = [float(e) for e in data[idx + 2].split(" ")]
    #                 position = [float(e) for e in data[idx + 3].split(" ")]
    #                 orientation = [float(e) for e in data[idx + 4].split(" ")]
    #                 color = [float(e) for e in data[idx + 5].split(" ")]
    #                 if debug:
    #                     print("Box #" + str(i) + ": Size=", size,
    #                           "Position=", position,
    #                           "Orientation=", orientation,
    #                           "Color=", color)
    #                 components.append({'type': 'box',
    #                                    'size': size,
    #                                    'position': position,
    #                                    'orientation': orientation,
    #                                    'color': color})
    #                 idx += 5
    #             else:
    #                 raise Exception("Not supported", data[idx + 1])
    #         objects.update({objectName: components})
    #     else:
    #         idx += 1

    return objects, sdfName, model_name

    


def writeBoxGeometryToSdfFile(fileSdf, geometry, objectName, objectNumber):
    position = geometry['position']
    orientation = geometry['orientation']
    rpy = euler_from_quaternion(
        [orientation[3], orientation[0], orientation[1], orientation[2]])
    size = geometry['size']
    color = geometry['color']
    fileSdf.write("            <link name='%s'>\n"
                  "                <pose>%f %f %f %f %f %f</pose>\n"
                  "                <collision name='collision'>\n"
                  "                    <geometry>\n"
                  "                        <box>\n"
                  "                            <size>%f %f %f</size>\n"
                  "                        </box>\n"
                  "                    </geometry>\n"
                  "                </collision>\n"
                  "                <visual name='visual'>\n"
                  "                    <geometry>\n"
                  "                        <box>\n"
                  "                            <size>%f %f %f</size>\n"
                  "                        </box>\n"
                  "                    </geometry>\n"
                  "                    <material>\n"
                  "                        <ambient>%f %f %f</ambient>\n"
                  "                        <diffuse>%f %f %f %f</diffuse>\n"
                  "                    </material>\n"
                  "                </visual>\n"
                  "            </link>\n"
                  % (objectName + "_" + str(objectNumber),
                     position[0], position[1], position[2],
                     rpy[0], rpy[1], rpy[2],
                     size[0], size[1], size[2], size[0], size[1], size[2],
                     color[0], color[1], color[2],
                     color[0], color[1], color[2], color[3]))


def createSceneFromSdf(scene_name, objects, model_name):
    fileScene = open(scene_name, "w")

    # fileSdf.write("<sdf version='1.4'>\n"
    #               "    <world name='demo'>\n")
    fileScene.write("(" + model_name + ")" + "+\n"
                    "* " + model_name + "\n"
                    "%d\n" %len(objects))

    for objectName in objects:
        shape = objects.get(objectName)[0].get('type')
        geometry = objects.get(objectName)[0].get('size')
        position = objects.get(objectName)[0].get('position')
        print(shape)
        print(geometry)
        print(position)
        # geometry[0] + " " + geometry[1] + " " + geometry[2] + "\n"
        # position[0] + " " + position[1] + " " + position[2] _ "\n"
        if shape == 'cylinder':
            fileScene.write(shape + "\n"+
                            geometry[0] + " " + geometry[1] + "\n"+
                            position[0] + " " + position[1] + " " + position[2] + "\n")
                            # "%f %f %f\n"
                            # "%f %f %f\n"
                            # % (geometry[0], geometry[1], geometry[2], position[0], position[1], position[2]))
        elif shape == 'box':
            fileScene.write(shape + "\n"+
                            geometry[0] + " " + geometry[1] + " " + geometry[2] + "\n"+
                            position[0] + " " + position[1] + " " + position[2] + "\n")
                            # "%f %f %f\n"
                            # "%f %f %f\n"
                            # % (geometry[0], geometry[1], geometry[2], position[0], position[1], position[2]))
        fileScene.write("0 0 0 1\n"
                        "1 1 1 1\n")
    fileScene.write(".\n")


    # for objectName in objects:
    #     fileSdf.write("        <model name='%s'>\n"
    #                   "            <pose>%f %f %f %f %f %f</pose>\n"
    #                   % (objectName,
    #                      pose[0], pose[1], pose[2], pose[3], pose[4], pose[5]))
    #     objectCount = 0
    #     for geometry in objects[objectName]:
    #         if geometry['type'] == 'box':
    #             writeBoxGeometryToSdfFile(
    #                 fileSdf, geometry, objectName, objectCount)
    #         else:
    #             raise Exception("Not supported: ", geometry['type'])
    #         objectCount += 1
    #     fileSdf.write("            <static>1</static>\n"
    #                   "        </model>\n")

    # fileSdf.write("    </world>\n"
    #               "</sdf>\n")
    fileScene.close()


if __name__ == "__main__":
    import os
    import sys
    import numpy as np

    for root, dirs, files in os.walk("/home/rs36/catkin_ws/src/hsr_driveby_full/scene_shape"):
        for file in files:
            if file.endswith(".sdf"):
                print(os.path.join(root, file))
                input_file = os.path.join(root, file)
                objects, sdfName, model_name = parseSceneFile(input_file)
                output_file = sdfName+".scene"
                print(output_file)
                print(model_name)
                # for obj in objects:
                #     print(obj)
                #     # print(objects.get(obj)[0].get('size'))
                #     print(objects.get(obj))
                #     print("===================")
                print(len(objects))
                createSceneFromSdf(output_file, objects, model_name)
    print(">>> DONE <<<")
    exit()
    # input_file = '/home/rs36/catkin_ws/src/hsr_driveby_pick_and_place_demo/models/meeting_room_table/model_white.sdf'
    input_file = '/home/rs36/catkin_ws/src/tmc_wrs_gazebo_world/models/wrc_bookshelf/model.sdf'
    output_file = ''
    # # Check that scene exists
    # assert(os.path.exists(input_file)
    # if os.path.exists(output_file):
    #     print("WARNING: Scene File exists, will be overwritten.")
    

    # if len(sys.argv) != 3:
    #     print("Two arguments required: [scene input file] [sdf output file]")
    # scene_file = os.path.abspath(sys.argv[1])
    # sdf_file = os.path.abspath(sys.argv[2])

    # # Check that scene exists
    # assert(os.path.exists(scene_file))
    # if os.path.exists(sdf_file):
    #     print("WARNING: SDF exists, will be overwritten.")

    # # TODO THIS IS HARD-CODED, MAKE PARAMETER
    # pose = [0.] * 6 #[0.8, 0, 0, 0, 0, np.pi/2]
    objects, sdfName, model_name = parseSceneFile(input_file)
    output_file = sdfName+".scene"
    print(output_file)
    print(model_name)
    for obj in objects:
        print(obj)
        # print(objects.get(obj)[0].get('size'))
        print(objects.get(obj))
        print("===================")
    print(len(objects))
    createSceneFromSdf(output_file, objects, model_name)
    print(">>> DONE <<<")